1.
// до изменений

// Sort the list in ascending order using the default comparison (operator<)
std::sort(myList.begin(), myList.end());

// после
// не использовать комментарии там, где можно использовать функцию или переменную,
// добавлена функция sortAscending, которая сортирует список по возрастанию

void sortAscending(std::vector<int>& array) {
    std::sort(array.begin(), array.end());
}
...
sortAscending(array);

2.
// до изменений

/* подпр.обр.пс.опер.DC */
int FDC();

// после
// нелокальная информация
// перенесены комментарии по интерфейсам в документацию

int FDC();

3.
// до изменений

...
// уст.длину симв. = 4, а,призн.перемест.='R'
T_SYM[ITSYM].DLSYM = 4;
T_SYM[ITSYM].PRPER = 'R';
...

// после
// шум и избыточный комментарий

...
T_SYM[ITSYM].DLSYM = 4; // Длина символа в полное слово
T_SYM[ITSYM].PRPER = 'R'; // Признак перемещаемого символа
...

4.
// до изменений
...
// PRNMET = 'N'; /*  занулить PRNMET зн.'N'*/

// после
// закомментированный код
// удален закомментированный код, он есть в системе контроля версий

5.
// до изменений

"""
Abstract class for scrappers
"""

from abc import ABC
from types import TracebackType
from typing import Optional

import aiohttp


class BaseScrapper(ABC):
    """
    Abstract base scrapper class with async interface
    """
    ...

// после
// обязательные комментарии и шум
// убран "обязательные" и зашумленные комментарии
from abc import ABC
from types import TracebackType
from typing import Optional

import aiohttp


class BaseScrapper(ABC):
    ...

6.
// до изменений

/*счетчик цикла*/
int I3;

// после
// избыточные комментарии
// удален комментарий, т.к. имя переменной самоочевидно
int tsymIndex;

7.
// до изменений
...
else if (TEK_ISX_KARTA.STRUCT_BUFCARD.OPERAND[0] == '0') {
      // CHADR += 3;
      CHADR = (CHADR + 3) / 4 * 4;
      return;
    }

// после
// закомментированный код
...
else if (TEK_ISX_KARTA.STRUCT_BUFCARD.OPERAND[0] == '0') {
      CHADR = (CHADR + 3) / 4 * 4;
      return;
    }

8.
// до изменений
...
/*..........................................................................*/

/*
******* Б Л О К  об'явлений подпрограмм, используемых при 2-ом просмотре
*/

void STXT(int ARG, int type)
{
...

// после
// позиционные маркеры
// удалены маркеры, процедуры и функции разделены по файлам

// second_pass.c
void STXT(int ARG, int type)
{
...

9.
// до изменений
...
// если CHADR не указ. на границу слова, то:
if (CHADR % 4) {
...

// после
// недостоверные комментарии
...
// Если CHADR не кратен 4, выравниваем его на границу слова
if (CHADR % 4) {
...

10.
// до изменений
...
// уст.CHADR на гр.сл.
CHADR = (CHADR / 4 + 1) * 4;
...

// после
// бормотание и сокращения
...
// Выравнивание CHADR на границу слова
CHADR = (CHADR / 4 + 1) * 4;
...

11.
// до изменений
...
# Пробуем создать папку, в которую будут сохранены загруженные изображения
mkdir(directory=arguments.output_path)
...

// после
// избыточный комментарий
// комментарий удален
...
mkdir(directory=arguments.output_path)
...

12.
// до изменений
...
# Проверяем статус ответа, если 200 - дальше работаем,
# иначе поднимаем ошибку
get_response.raise_for_status()
...

// после
// бормотание и избыточный комментарий
// комментарий удален, переменная переименованп
...
main_page_response.raise_for_status()
...

13.
// до изменений
...
# Возможно в будущем пригодится, сейчас все ссылки на
# изображения хранятся на одной html странице
# pages_num = page_soup.find(
#     'div',
#     class_=PAGINATION_SCRIPT_NAME)[PAGE_COUNTER_VARIABLE]
...

// после
// закомментированный код
// убран из кода

14.
// до изменений
...
# Проверяем, если каталог актуален и загружаем изображения
if arguments.is_all_catalogs or (catalog_relevance and 'active' in catalog_relevance[1]):
    # продолжаем работу

// после
// избыточные комментарии
// комментарии удалены, так как код самодокументируется
...
is_catalog_active = catalog_relevance and 'active' in catalog_relevance[1]
if arguments.is_all_catalogs or is_catalog_active:
    ...

15.
// до изменений
...
# tqdm - отрисовка в консоли прогресса, здесь итерируемся
# по всем ссылкам на основной странице. Прогрессбар отображает, сколько времени осталось до завершения обработки всех элементов страницы.
for link in tqdm(main_soup.find_all('a')):
...

// после
// слишком много информации
// оставлена только важная информация
...
# Отображение прогресса обработки ссылок на странице
for link in tqdm(main_soup.find_all('a')):
...
