3.
Получить все задачи с наивысшим приоритетом, которые
находятся в статусе "pending".

** В представленном мной решении максимальный приоритет
берется из всех существующих задач, что может привести к
пустой выдаче, так как у других задач с иным статусом он
может быть выше.
Необходимо в подзапрос получения максимального приоритета
добавить условие проверки статуса:

...
    AND Tasks.priority = (SELECT MAX(Tasks.priority)
                          FROM Tasks WHERE Tasks.status = 'pending');

6.
Получить список профессий с наибольшим количеством
незавершённых задач ("pending" и "in_progress") у гномов
этих профессий.

** В представленном мной решении выборка содержит строки
только с максимальным количеством незавершенных задач, в
эталонном решении выборка содержит значения по убыванию с
максимального количества до наименьшего на данный момент.
Считаю свое решение одним из возможных вариантов
интерпретации задания.

7.
Для каждого типа предметов узнать средний возраст гномов,
владеющих этими предметами.

** Не добавил alias для столбца среднего возраста.

SELECT Items.type,
    AVG(Dwarves.age) as average_age
...

8.
Найти всех гномов старше среднего возраста (по всем гномам
в базе), которые не владеют никакими предметами.

** Эталонное решение выполнено с использованием подзапроса,
в моем решении использовался LEFT JOIN. Вероятно, что
решение с использованием LEFT JOIN может занимать больше
памяти, так как в промежуточной выборке будут использоваться
поля таблицы Dwarves с NULL значениями (гномы, у которых нет
предметов).
Решение с подзапросом было бы предпочтительнее:

SELECT Dwarves.dwarf_id,
    Dwarves.name,
    Dwarves.age,
    Dwarves.profession,
    Dwarves.squad_id
FROM Dwarves
WHERE Dwarves.age > (SELECT AVG(Dwarves.age) FROM Dwarves)
    AND Dwarves.dwarf_id NOT IN (SELECT Items.owner_id FROM Items);
